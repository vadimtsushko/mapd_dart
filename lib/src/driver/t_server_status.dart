/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_server_status;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import 'package:mapd/src/driver.dart';

class TServerStatus implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TServerStatus");
  static final TField _READ_ONLY_FIELD_DESC = new TField("read_only", TType.BOOL, 1);
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.STRING, 2);
  static final TField _RENDERING_ENABLED_FIELD_DESC = new TField("rendering_enabled", TType.BOOL, 3);
  static final TField _START_TIME_FIELD_DESC = new TField("start_time", TType.I64, 4);
  static final TField _EDITION_FIELD_DESC = new TField("edition", TType.STRING, 5);
  static final TField _HOST_NAME_FIELD_DESC = new TField("host_name", TType.STRING, 6);

  bool _read_only = false;
  static const int READ_ONLY = 1;
  String _version;
  static const int VERSION = 2;
  bool _rendering_enabled = false;
  static const int RENDERING_ENABLED = 3;
  int _start_time = 0;
  static const int START_TIME = 4;
  String _edition;
  static const int EDITION = 5;
  String _host_name;
  static const int HOST_NAME = 6;

  bool __isset_read_only = false;
  bool __isset_rendering_enabled = false;
  bool __isset_start_time = false;

  TServerStatus() {
  }

  // read_only
  bool get read_only => this._read_only;

  set read_only(bool read_only) {
    this._read_only = read_only;
    this.__isset_read_only = true;
  }

  bool isSetRead_only() => this.__isset_read_only;

  unsetRead_only() {
    this.__isset_read_only = false;
  }

  // version
  String get version => this._version;

  set version(String version) {
    this._version = version;
  }

  bool isSetVersion() => this.version != null;

  unsetVersion() {
    this.version = null;
  }

  // rendering_enabled
  bool get rendering_enabled => this._rendering_enabled;

  set rendering_enabled(bool rendering_enabled) {
    this._rendering_enabled = rendering_enabled;
    this.__isset_rendering_enabled = true;
  }

  bool isSetRendering_enabled() => this.__isset_rendering_enabled;

  unsetRendering_enabled() {
    this.__isset_rendering_enabled = false;
  }

  // start_time
  int get start_time => this._start_time;

  set start_time(int start_time) {
    this._start_time = start_time;
    this.__isset_start_time = true;
  }

  bool isSetStart_time() => this.__isset_start_time;

  unsetStart_time() {
    this.__isset_start_time = false;
  }

  // edition
  String get edition => this._edition;

  set edition(String edition) {
    this._edition = edition;
  }

  bool isSetEdition() => this.edition != null;

  unsetEdition() {
    this.edition = null;
  }

  // host_name
  String get host_name => this._host_name;

  set host_name(String host_name) {
    this._host_name = host_name;
  }

  bool isSetHost_name() => this.host_name != null;

  unsetHost_name() {
    this.host_name = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case READ_ONLY:
        return this.read_only;
      case VERSION:
        return this.version;
      case RENDERING_ENABLED:
        return this.rendering_enabled;
      case START_TIME:
        return this.start_time;
      case EDITION:
        return this.edition;
      case HOST_NAME:
        return this.host_name;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case READ_ONLY:
        if (value == null) {
          unsetRead_only();
        } else {
          this.read_only = value;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value;
        }
        break;

      case RENDERING_ENABLED:
        if (value == null) {
          unsetRendering_enabled();
        } else {
          this.rendering_enabled = value;
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStart_time();
        } else {
          this.start_time = value;
        }
        break;

      case EDITION:
        if (value == null) {
          unsetEdition();
        } else {
          this.edition = value;
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHost_name();
        } else {
          this.host_name = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case READ_ONLY:
        return isSetRead_only();
      case VERSION:
        return isSetVersion();
      case RENDERING_ENABLED:
        return isSetRendering_enabled();
      case START_TIME:
        return isSetStart_time();
      case EDITION:
        return isSetEdition();
      case HOST_NAME:
        return isSetHost_name();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case READ_ONLY:
          if (field.type == TType.BOOL) {
            this.read_only = iprot.readBool();
            this.__isset_read_only = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.STRING) {
            this.version = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RENDERING_ENABLED:
          if (field.type == TType.BOOL) {
            this.rendering_enabled = iprot.readBool();
            this.__isset_rendering_enabled = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_TIME:
          if (field.type == TType.I64) {
            this.start_time = iprot.readI64();
            this.__isset_start_time = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDITION:
          if (field.type == TType.STRING) {
            this.edition = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOST_NAME:
          if (field.type == TType.STRING) {
            this.host_name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_READ_ONLY_FIELD_DESC);
    oprot.writeBool(this.read_only);
    oprot.writeFieldEnd();
    if (this.version != null) {
      oprot.writeFieldBegin(_VERSION_FIELD_DESC);
      oprot.writeString(this.version);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_RENDERING_ENABLED_FIELD_DESC);
    oprot.writeBool(this.rendering_enabled);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
    oprot.writeI64(this.start_time);
    oprot.writeFieldEnd();
    if (this.edition != null) {
      oprot.writeFieldBegin(_EDITION_FIELD_DESC);
      oprot.writeString(this.edition);
      oprot.writeFieldEnd();
    }
    if (this.host_name != null) {
      oprot.writeFieldBegin(_HOST_NAME_FIELD_DESC);
      oprot.writeString(this.host_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TServerStatus(");

    ret.write("read_only:");
    ret.write(this.read_only);

    ret.write(", ");
    ret.write("version:");
    if (this.version == null) {
      ret.write("null");
    } else {
      ret.write(this.version);
    }

    ret.write(", ");
    ret.write("rendering_enabled:");
    ret.write(this.rendering_enabled);

    ret.write(", ");
    ret.write("start_time:");
    ret.write(this.start_time);

    ret.write(", ");
    ret.write("edition:");
    if (this.edition == null) {
      ret.write("null");
    } else {
      ret.write(this.edition);
    }

    ret.write(", ");
    ret.write("host_name:");
    if (this.host_name == null) {
      ret.write("null");
    } else {
      ret.write(this.host_name);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

