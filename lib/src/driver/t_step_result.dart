/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_step_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import '../mapd.dart';

class TStepResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TStepResult");
  static final TField _SERIALIZED_ROWS_FIELD_DESC = new TField("serialized_rows", TType.STRING, 1);
  static final TField _EXECUTION_FINISHED_FIELD_DESC = new TField("execution_finished", TType.BOOL, 2);
  static final TField _MERGE_TYPE_FIELD_DESC = new TField("merge_type", TType.I32, 3);
  static final TField _SHARDED_FIELD_DESC = new TField("sharded", TType.BOOL, 4);
  static final TField _ROW_DESC_FIELD_DESC = new TField("row_desc", TType.LIST, 5);
  static final TField _NODE_ID_FIELD_DESC = new TField("node_id", TType.I32, 6);

  String _serialized_rows;
  static const int SERIALIZED_ROWS = 1;
  bool _execution_finished = false;
  static const int EXECUTION_FINISHED = 2;
  int _merge_type;
  static const int MERGE_TYPE = 3;
  bool _sharded = false;
  static const int SHARDED = 4;
  List<TColumnType> _row_desc;
  static const int ROW_DESC = 5;
  int _node_id = 0;
  static const int NODE_ID = 6;

  bool __isset_execution_finished = false;
  bool __isset_merge_type = false;
  bool __isset_sharded = false;
  bool __isset_node_id = false;

  TStepResult() {
  }

  // serialized_rows
  String get serialized_rows => this._serialized_rows;

  set serialized_rows(String serialized_rows) {
    this._serialized_rows = serialized_rows;
  }

  bool isSetSerialized_rows() => this.serialized_rows != null;

  unsetSerialized_rows() {
    this.serialized_rows = null;
  }

  // execution_finished
  bool get execution_finished => this._execution_finished;

  set execution_finished(bool execution_finished) {
    this._execution_finished = execution_finished;
    this.__isset_execution_finished = true;
  }

  bool isSetExecution_finished() => this.__isset_execution_finished;

  unsetExecution_finished() {
    this.__isset_execution_finished = false;
  }

  // merge_type
  int get merge_type => this._merge_type;

  set merge_type(int merge_type) {
    this._merge_type = merge_type;
    this.__isset_merge_type = true;
  }

  bool isSetMerge_type() => this.__isset_merge_type;

  unsetMerge_type() {
    this.__isset_merge_type = false;
  }

  // sharded
  bool get sharded => this._sharded;

  set sharded(bool sharded) {
    this._sharded = sharded;
    this.__isset_sharded = true;
  }

  bool isSetSharded() => this.__isset_sharded;

  unsetSharded() {
    this.__isset_sharded = false;
  }

  // row_desc
  List<TColumnType> get row_desc => this._row_desc;

  set row_desc(List<TColumnType> row_desc) {
    this._row_desc = row_desc;
  }

  bool isSetRow_desc() => this.row_desc != null;

  unsetRow_desc() {
    this.row_desc = null;
  }

  // node_id
  int get node_id => this._node_id;

  set node_id(int node_id) {
    this._node_id = node_id;
    this.__isset_node_id = true;
  }

  bool isSetNode_id() => this.__isset_node_id;

  unsetNode_id() {
    this.__isset_node_id = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SERIALIZED_ROWS:
        return this.serialized_rows;
      case EXECUTION_FINISHED:
        return this.execution_finished;
      case MERGE_TYPE:
        return this.merge_type;
      case SHARDED:
        return this.sharded;
      case ROW_DESC:
        return this.row_desc;
      case NODE_ID:
        return this.node_id;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SERIALIZED_ROWS:
        if (value == null) {
          unsetSerialized_rows();
        } else {
          this.serialized_rows = value;
        }
        break;

      case EXECUTION_FINISHED:
        if (value == null) {
          unsetExecution_finished();
        } else {
          this.execution_finished = value;
        }
        break;

      case MERGE_TYPE:
        if (value == null) {
          unsetMerge_type();
        } else {
          this.merge_type = value;
        }
        break;

      case SHARDED:
        if (value == null) {
          unsetSharded();
        } else {
          this.sharded = value;
        }
        break;

      case ROW_DESC:
        if (value == null) {
          unsetRow_desc();
        } else {
          this.row_desc = value;
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNode_id();
        } else {
          this.node_id = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SERIALIZED_ROWS:
        return isSetSerialized_rows();
      case EXECUTION_FINISHED:
        return isSetExecution_finished();
      case MERGE_TYPE:
        return isSetMerge_type();
      case SHARDED:
        return isSetSharded();
      case ROW_DESC:
        return isSetRow_desc();
      case NODE_ID:
        return isSetNode_id();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SERIALIZED_ROWS:
          if (field.type == TType.STRING) {
            this.serialized_rows = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTION_FINISHED:
          if (field.type == TType.BOOL) {
            this.execution_finished = iprot.readBool();
            this.__isset_execution_finished = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MERGE_TYPE:
          if (field.type == TType.I32) {
            this.merge_type = iprot.readI32();
            this.__isset_merge_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHARDED:
          if (field.type == TType.BOOL) {
            this.sharded = iprot.readBool();
            this.__isset_sharded = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROW_DESC:
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.row_desc = new List<TColumnType>();
              for (int _i33 = 0; _i33 < _list32.length; ++_i33) {
                TColumnType _elem34;
                _elem34 = new TColumnType();
                _elem34.read(iprot);
                this.row_desc.add(_elem34);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NODE_ID:
          if (field.type == TType.I32) {
            this.node_id = iprot.readI32();
            this.__isset_node_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.serialized_rows != null) {
      oprot.writeFieldBegin(_SERIALIZED_ROWS_FIELD_DESC);
      oprot.writeString(this.serialized_rows);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EXECUTION_FINISHED_FIELD_DESC);
    oprot.writeBool(this.execution_finished);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MERGE_TYPE_FIELD_DESC);
    oprot.writeI32(this.merge_type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SHARDED_FIELD_DESC);
    oprot.writeBool(this.sharded);
    oprot.writeFieldEnd();
    if (this.row_desc != null) {
      oprot.writeFieldBegin(_ROW_DESC_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.row_desc.length));
        for (var elem35 in this.row_desc) {
          elem35.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_NODE_ID_FIELD_DESC);
    oprot.writeI32(this.node_id);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TStepResult(");

    ret.write("serialized_rows:");
    if (this.serialized_rows == null) {
      ret.write("null");
    } else {
      ret.write(this.serialized_rows);
    }

    ret.write(", ");
    ret.write("execution_finished:");
    ret.write(this.execution_finished);

    ret.write(", ");
    ret.write("merge_type:");
    String merge_type_name = TMergeType.VALUES_TO_NAMES[this.merge_type];
    if (merge_type_name != null) {
      ret.write(merge_type_name);
      ret.write(" (");
    }
    ret.write(this.merge_type);
    if (merge_type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("sharded:");
    ret.write(this.sharded);

    ret.write(", ");
    ret.write("row_desc:");
    if (this.row_desc == null) {
      ret.write("null");
    } else {
      ret.write(this.row_desc);
    }

    ret.write(", ");
    ret.write("node_id:");
    ret.write(this.node_id);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMerge_type() && !TMergeType.VALID_VALUES.contains(merge_type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'merge_type' has been assigned the invalid value $merge_type");
    }
  }

}

