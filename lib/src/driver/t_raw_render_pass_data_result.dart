/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_raw_render_pass_data_result;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import 'package:mapd/src/driver.dart';

class TRawRenderPassDataResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TRawRenderPassDataResult");
  static final TField _NUM_CHANNELS_FIELD_DESC = new TField("num_channels", TType.I32, 1);
  static final TField _PIXELS_FIELD_DESC = new TField("pixels", TType.STRING, 2);
  static final TField _ROW_IDS__A_FIELD_DESC = new TField("row_ids_A", TType.STRING, 3);
  static final TField _ROW_IDS__B_FIELD_DESC = new TField("row_ids_B", TType.STRING, 4);
  static final TField _TABLE_IDS_FIELD_DESC = new TField("table_ids", TType.STRING, 5);

  int _num_channels = 0;
  static const int NUM_CHANNELS = 1;
  Uint8List _pixels;
  static const int PIXELS = 2;
  Uint8List _row_ids_A;
  static const int ROW_IDS_A = 3;
  Uint8List _row_ids_B;
  static const int ROW_IDS_B = 4;
  Uint8List _table_ids;
  static const int TABLE_IDS = 5;

  bool __isset_num_channels = false;

  TRawRenderPassDataResult() {
  }

  // num_channels
  int get num_channels => this._num_channels;

  set num_channels(int num_channels) {
    this._num_channels = num_channels;
    this.__isset_num_channels = true;
  }

  bool isSetNum_channels() => this.__isset_num_channels;

  unsetNum_channels() {
    this.__isset_num_channels = false;
  }

  // pixels
  Uint8List get pixels => this._pixels;

  set pixels(Uint8List pixels) {
    this._pixels = pixels;
  }

  bool isSetPixels() => this.pixels != null;

  unsetPixels() {
    this.pixels = null;
  }

  // row_ids_A
  Uint8List get row_ids_A => this._row_ids_A;

  set row_ids_A(Uint8List row_ids_A) {
    this._row_ids_A = row_ids_A;
  }

  bool isSetRow_ids_A() => this.row_ids_A != null;

  unsetRow_ids_A() {
    this.row_ids_A = null;
  }

  // row_ids_B
  Uint8List get row_ids_B => this._row_ids_B;

  set row_ids_B(Uint8List row_ids_B) {
    this._row_ids_B = row_ids_B;
  }

  bool isSetRow_ids_B() => this.row_ids_B != null;

  unsetRow_ids_B() {
    this.row_ids_B = null;
  }

  // table_ids
  Uint8List get table_ids => this._table_ids;

  set table_ids(Uint8List table_ids) {
    this._table_ids = table_ids;
  }

  bool isSetTable_ids() => this.table_ids != null;

  unsetTable_ids() {
    this.table_ids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUM_CHANNELS:
        return this.num_channels;
      case PIXELS:
        return this.pixels;
      case ROW_IDS_A:
        return this.row_ids_A;
      case ROW_IDS_B:
        return this.row_ids_B;
      case TABLE_IDS:
        return this.table_ids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUM_CHANNELS:
        if (value == null) {
          unsetNum_channels();
        } else {
          this.num_channels = value;
        }
        break;

      case PIXELS:
        if (value == null) {
          unsetPixels();
        } else {
          this.pixels = value;
        }
        break;

      case ROW_IDS_A:
        if (value == null) {
          unsetRow_ids_A();
        } else {
          this.row_ids_A = value;
        }
        break;

      case ROW_IDS_B:
        if (value == null) {
          unsetRow_ids_B();
        } else {
          this.row_ids_B = value;
        }
        break;

      case TABLE_IDS:
        if (value == null) {
          unsetTable_ids();
        } else {
          this.table_ids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUM_CHANNELS:
        return isSetNum_channels();
      case PIXELS:
        return isSetPixels();
      case ROW_IDS_A:
        return isSetRow_ids_A();
      case ROW_IDS_B:
        return isSetRow_ids_B();
      case TABLE_IDS:
        return isSetTable_ids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NUM_CHANNELS:
          if (field.type == TType.I32) {
            this.num_channels = iprot.readI32();
            this.__isset_num_channels = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PIXELS:
          if (field.type == TType.STRING) {
            this.pixels = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROW_IDS_A:
          if (field.type == TType.STRING) {
            this.row_ids_A = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROW_IDS_B:
          if (field.type == TType.STRING) {
            this.row_ids_B = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TABLE_IDS:
          if (field.type == TType.STRING) {
            this.table_ids = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NUM_CHANNELS_FIELD_DESC);
    oprot.writeI32(this.num_channels);
    oprot.writeFieldEnd();
    if (this.pixels != null) {
      oprot.writeFieldBegin(_PIXELS_FIELD_DESC);
      oprot.writeBinary(this.pixels);
      oprot.writeFieldEnd();
    }
    if (this.row_ids_A != null) {
      oprot.writeFieldBegin(_ROW_IDS__A_FIELD_DESC);
      oprot.writeBinary(this.row_ids_A);
      oprot.writeFieldEnd();
    }
    if (this.row_ids_B != null) {
      oprot.writeFieldBegin(_ROW_IDS__B_FIELD_DESC);
      oprot.writeBinary(this.row_ids_B);
      oprot.writeFieldEnd();
    }
    if (this.table_ids != null) {
      oprot.writeFieldBegin(_TABLE_IDS_FIELD_DESC);
      oprot.writeBinary(this.table_ids);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TRawRenderPassDataResult(");

    ret.write("num_channels:");
    ret.write(this.num_channels);

    ret.write(", ");
    ret.write("pixels:");
    if (this.pixels == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("row_ids_A:");
    if (this.row_ids_A == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("row_ids_B:");
    if (this.row_ids_B == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("table_ids:");
    if (this.table_ids == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

