/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_node_memory_info;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import 'package:mapd/src/driver.dart';

class TNodeMemoryInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TNodeMemoryInfo");
  static final TField _HOST_NAME_FIELD_DESC = new TField("host_name", TType.STRING, 1);
  static final TField _PAGE_SIZE_FIELD_DESC = new TField("page_size", TType.I64, 2);
  static final TField _MAX_NUM_PAGES_FIELD_DESC = new TField("max_num_pages", TType.I64, 3);
  static final TField _NUM_PAGES_ALLOCATED_FIELD_DESC = new TField("num_pages_allocated", TType.I64, 4);
  static final TField _IS_ALLOCATION_CAPPED_FIELD_DESC = new TField("is_allocation_capped", TType.BOOL, 5);
  static final TField _NODE_MEMORY_DATA_FIELD_DESC = new TField("node_memory_data", TType.LIST, 6);

  String _host_name;
  static const int HOST_NAME = 1;
  int _page_size = 0;
  static const int PAGE_SIZE = 2;
  int _max_num_pages = 0;
  static const int MAX_NUM_PAGES = 3;
  int _num_pages_allocated = 0;
  static const int NUM_PAGES_ALLOCATED = 4;
  bool _is_allocation_capped = false;
  static const int IS_ALLOCATION_CAPPED = 5;
  List<TMemoryData> _node_memory_data;
  static const int NODE_MEMORY_DATA = 6;

  bool __isset_page_size = false;
  bool __isset_max_num_pages = false;
  bool __isset_num_pages_allocated = false;
  bool __isset_is_allocation_capped = false;

  TNodeMemoryInfo() {
  }

  // host_name
  String get host_name => this._host_name;

  set host_name(String host_name) {
    this._host_name = host_name;
  }

  bool isSetHost_name() => this.host_name != null;

  unsetHost_name() {
    this.host_name = null;
  }

  // page_size
  int get page_size => this._page_size;

  set page_size(int page_size) {
    this._page_size = page_size;
    this.__isset_page_size = true;
  }

  bool isSetPage_size() => this.__isset_page_size;

  unsetPage_size() {
    this.__isset_page_size = false;
  }

  // max_num_pages
  int get max_num_pages => this._max_num_pages;

  set max_num_pages(int max_num_pages) {
    this._max_num_pages = max_num_pages;
    this.__isset_max_num_pages = true;
  }

  bool isSetMax_num_pages() => this.__isset_max_num_pages;

  unsetMax_num_pages() {
    this.__isset_max_num_pages = false;
  }

  // num_pages_allocated
  int get num_pages_allocated => this._num_pages_allocated;

  set num_pages_allocated(int num_pages_allocated) {
    this._num_pages_allocated = num_pages_allocated;
    this.__isset_num_pages_allocated = true;
  }

  bool isSetNum_pages_allocated() => this.__isset_num_pages_allocated;

  unsetNum_pages_allocated() {
    this.__isset_num_pages_allocated = false;
  }

  // is_allocation_capped
  bool get is_allocation_capped => this._is_allocation_capped;

  set is_allocation_capped(bool is_allocation_capped) {
    this._is_allocation_capped = is_allocation_capped;
    this.__isset_is_allocation_capped = true;
  }

  bool isSetIs_allocation_capped() => this.__isset_is_allocation_capped;

  unsetIs_allocation_capped() {
    this.__isset_is_allocation_capped = false;
  }

  // node_memory_data
  List<TMemoryData> get node_memory_data => this._node_memory_data;

  set node_memory_data(List<TMemoryData> node_memory_data) {
    this._node_memory_data = node_memory_data;
  }

  bool isSetNode_memory_data() => this.node_memory_data != null;

  unsetNode_memory_data() {
    this.node_memory_data = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOST_NAME:
        return this.host_name;
      case PAGE_SIZE:
        return this.page_size;
      case MAX_NUM_PAGES:
        return this.max_num_pages;
      case NUM_PAGES_ALLOCATED:
        return this.num_pages_allocated;
      case IS_ALLOCATION_CAPPED:
        return this.is_allocation_capped;
      case NODE_MEMORY_DATA:
        return this.node_memory_data;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HOST_NAME:
        if (value == null) {
          unsetHost_name();
        } else {
          this.host_name = value;
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPage_size();
        } else {
          this.page_size = value;
        }
        break;

      case MAX_NUM_PAGES:
        if (value == null) {
          unsetMax_num_pages();
        } else {
          this.max_num_pages = value;
        }
        break;

      case NUM_PAGES_ALLOCATED:
        if (value == null) {
          unsetNum_pages_allocated();
        } else {
          this.num_pages_allocated = value;
        }
        break;

      case IS_ALLOCATION_CAPPED:
        if (value == null) {
          unsetIs_allocation_capped();
        } else {
          this.is_allocation_capped = value;
        }
        break;

      case NODE_MEMORY_DATA:
        if (value == null) {
          unsetNode_memory_data();
        } else {
          this.node_memory_data = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOST_NAME:
        return isSetHost_name();
      case PAGE_SIZE:
        return isSetPage_size();
      case MAX_NUM_PAGES:
        return isSetMax_num_pages();
      case NUM_PAGES_ALLOCATED:
        return isSetNum_pages_allocated();
      case IS_ALLOCATION_CAPPED:
        return isSetIs_allocation_capped();
      case NODE_MEMORY_DATA:
        return isSetNode_memory_data();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOST_NAME:
          if (field.type == TType.STRING) {
            this.host_name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAGE_SIZE:
          if (field.type == TType.I64) {
            this.page_size = iprot.readI64();
            this.__isset_page_size = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_NUM_PAGES:
          if (field.type == TType.I64) {
            this.max_num_pages = iprot.readI64();
            this.__isset_max_num_pages = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM_PAGES_ALLOCATED:
          if (field.type == TType.I64) {
            this.num_pages_allocated = iprot.readI64();
            this.__isset_num_pages_allocated = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_ALLOCATION_CAPPED:
          if (field.type == TType.BOOL) {
            this.is_allocation_capped = iprot.readBool();
            this.__isset_is_allocation_capped = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NODE_MEMORY_DATA:
          if (field.type == TType.LIST) {
            {
              TList _list56 = iprot.readListBegin();
              this.node_memory_data = new List<TMemoryData>();
              for (int _i57 = 0; _i57 < _list56.length; ++_i57) {
                TMemoryData _elem58;
                _elem58 = new TMemoryData();
                _elem58.read(iprot);
                this.node_memory_data.add(_elem58);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.host_name != null) {
      oprot.writeFieldBegin(_HOST_NAME_FIELD_DESC);
      oprot.writeString(this.host_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PAGE_SIZE_FIELD_DESC);
    oprot.writeI64(this.page_size);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_NUM_PAGES_FIELD_DESC);
    oprot.writeI64(this.max_num_pages);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NUM_PAGES_ALLOCATED_FIELD_DESC);
    oprot.writeI64(this.num_pages_allocated);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_IS_ALLOCATION_CAPPED_FIELD_DESC);
    oprot.writeBool(this.is_allocation_capped);
    oprot.writeFieldEnd();
    if (this.node_memory_data != null) {
      oprot.writeFieldBegin(_NODE_MEMORY_DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.node_memory_data.length));
        for (var elem59 in this.node_memory_data) {
          elem59.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TNodeMemoryInfo(");

    ret.write("host_name:");
    if (this.host_name == null) {
      ret.write("null");
    } else {
      ret.write(this.host_name);
    }

    ret.write(", ");
    ret.write("page_size:");
    ret.write(this.page_size);

    ret.write(", ");
    ret.write("max_num_pages:");
    ret.write(this.max_num_pages);

    ret.write(", ");
    ret.write("num_pages_allocated:");
    ret.write(this.num_pages_allocated);

    ret.write(", ");
    ret.write("is_allocation_capped:");
    ret.write(this.is_allocation_capped);

    ret.write(", ");
    ret.write("node_memory_data:");
    if (this.node_memory_data == null) {
      ret.write("null");
    } else {
      ret.write(this.node_memory_data);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

