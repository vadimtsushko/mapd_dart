/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_table_details;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import '../mapd.dart';

class TTableDetails implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TTableDetails");
  static final TField _ROW_DESC_FIELD_DESC = new TField("row_desc", TType.LIST, 1);
  static final TField _FRAGMENT_SIZE_FIELD_DESC = new TField("fragment_size", TType.I64, 2);
  static final TField _PAGE_SIZE_FIELD_DESC = new TField("page_size", TType.I64, 3);
  static final TField _MAX_ROWS_FIELD_DESC = new TField("max_rows", TType.I64, 4);
  static final TField _VIEW_SQL_FIELD_DESC = new TField("view_sql", TType.STRING, 5);
  static final TField _SHARD_COUNT_FIELD_DESC = new TField("shard_count", TType.I64, 6);
  static final TField _KEY_METAINFO_FIELD_DESC = new TField("key_metainfo", TType.STRING, 7);
  static final TField _IS_TEMPORARY_FIELD_DESC = new TField("is_temporary", TType.BOOL, 8);

  List<TColumnType> _row_desc;
  static const int ROW_DESC = 1;
  int _fragment_size = 0;
  static const int FRAGMENT_SIZE = 2;
  int _page_size = 0;
  static const int PAGE_SIZE = 3;
  int _max_rows = 0;
  static const int MAX_ROWS = 4;
  String _view_sql;
  static const int VIEW_SQL = 5;
  int _shard_count = 0;
  static const int SHARD_COUNT = 6;
  String _key_metainfo;
  static const int KEY_METAINFO = 7;
  bool _is_temporary = false;
  static const int IS_TEMPORARY = 8;

  bool __isset_fragment_size = false;
  bool __isset_page_size = false;
  bool __isset_max_rows = false;
  bool __isset_shard_count = false;
  bool __isset_is_temporary = false;

  TTableDetails() {
  }

  // row_desc
  List<TColumnType> get row_desc => this._row_desc;

  set row_desc(List<TColumnType> row_desc) {
    this._row_desc = row_desc;
  }

  bool isSetRow_desc() => this.row_desc != null;

  unsetRow_desc() {
    this.row_desc = null;
  }

  // fragment_size
  int get fragment_size => this._fragment_size;

  set fragment_size(int fragment_size) {
    this._fragment_size = fragment_size;
    this.__isset_fragment_size = true;
  }

  bool isSetFragment_size() => this.__isset_fragment_size;

  unsetFragment_size() {
    this.__isset_fragment_size = false;
  }

  // page_size
  int get page_size => this._page_size;

  set page_size(int page_size) {
    this._page_size = page_size;
    this.__isset_page_size = true;
  }

  bool isSetPage_size() => this.__isset_page_size;

  unsetPage_size() {
    this.__isset_page_size = false;
  }

  // max_rows
  int get max_rows => this._max_rows;

  set max_rows(int max_rows) {
    this._max_rows = max_rows;
    this.__isset_max_rows = true;
  }

  bool isSetMax_rows() => this.__isset_max_rows;

  unsetMax_rows() {
    this.__isset_max_rows = false;
  }

  // view_sql
  String get view_sql => this._view_sql;

  set view_sql(String view_sql) {
    this._view_sql = view_sql;
  }

  bool isSetView_sql() => this.view_sql != null;

  unsetView_sql() {
    this.view_sql = null;
  }

  // shard_count
  int get shard_count => this._shard_count;

  set shard_count(int shard_count) {
    this._shard_count = shard_count;
    this.__isset_shard_count = true;
  }

  bool isSetShard_count() => this.__isset_shard_count;

  unsetShard_count() {
    this.__isset_shard_count = false;
  }

  // key_metainfo
  String get key_metainfo => this._key_metainfo;

  set key_metainfo(String key_metainfo) {
    this._key_metainfo = key_metainfo;
  }

  bool isSetKey_metainfo() => this.key_metainfo != null;

  unsetKey_metainfo() {
    this.key_metainfo = null;
  }

  // is_temporary
  bool get is_temporary => this._is_temporary;

  set is_temporary(bool is_temporary) {
    this._is_temporary = is_temporary;
    this.__isset_is_temporary = true;
  }

  bool isSetIs_temporary() => this.__isset_is_temporary;

  unsetIs_temporary() {
    this.__isset_is_temporary = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ROW_DESC:
        return this.row_desc;
      case FRAGMENT_SIZE:
        return this.fragment_size;
      case PAGE_SIZE:
        return this.page_size;
      case MAX_ROWS:
        return this.max_rows;
      case VIEW_SQL:
        return this.view_sql;
      case SHARD_COUNT:
        return this.shard_count;
      case KEY_METAINFO:
        return this.key_metainfo;
      case IS_TEMPORARY:
        return this.is_temporary;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ROW_DESC:
        if (value == null) {
          unsetRow_desc();
        } else {
          this.row_desc = value;
        }
        break;

      case FRAGMENT_SIZE:
        if (value == null) {
          unsetFragment_size();
        } else {
          this.fragment_size = value;
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPage_size();
        } else {
          this.page_size = value;
        }
        break;

      case MAX_ROWS:
        if (value == null) {
          unsetMax_rows();
        } else {
          this.max_rows = value;
        }
        break;

      case VIEW_SQL:
        if (value == null) {
          unsetView_sql();
        } else {
          this.view_sql = value;
        }
        break;

      case SHARD_COUNT:
        if (value == null) {
          unsetShard_count();
        } else {
          this.shard_count = value;
        }
        break;

      case KEY_METAINFO:
        if (value == null) {
          unsetKey_metainfo();
        } else {
          this.key_metainfo = value;
        }
        break;

      case IS_TEMPORARY:
        if (value == null) {
          unsetIs_temporary();
        } else {
          this.is_temporary = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ROW_DESC:
        return isSetRow_desc();
      case FRAGMENT_SIZE:
        return isSetFragment_size();
      case PAGE_SIZE:
        return isSetPage_size();
      case MAX_ROWS:
        return isSetMax_rows();
      case VIEW_SQL:
        return isSetView_sql();
      case SHARD_COUNT:
        return isSetShard_count();
      case KEY_METAINFO:
        return isSetKey_metainfo();
      case IS_TEMPORARY:
        return isSetIs_temporary();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ROW_DESC:
          if (field.type == TType.LIST) {
            {
              TList _list56 = iprot.readListBegin();
              this.row_desc = new List<TColumnType>();
              for (int _i57 = 0; _i57 < _list56.length; ++_i57) {
                TColumnType _elem58;
                _elem58 = new TColumnType();
                _elem58.read(iprot);
                this.row_desc.add(_elem58);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FRAGMENT_SIZE:
          if (field.type == TType.I64) {
            this.fragment_size = iprot.readI64();
            this.__isset_fragment_size = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAGE_SIZE:
          if (field.type == TType.I64) {
            this.page_size = iprot.readI64();
            this.__isset_page_size = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAX_ROWS:
          if (field.type == TType.I64) {
            this.max_rows = iprot.readI64();
            this.__isset_max_rows = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VIEW_SQL:
          if (field.type == TType.STRING) {
            this.view_sql = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHARD_COUNT:
          if (field.type == TType.I64) {
            this.shard_count = iprot.readI64();
            this.__isset_shard_count = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case KEY_METAINFO:
          if (field.type == TType.STRING) {
            this.key_metainfo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_TEMPORARY:
          if (field.type == TType.BOOL) {
            this.is_temporary = iprot.readBool();
            this.__isset_is_temporary = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.row_desc != null) {
      oprot.writeFieldBegin(_ROW_DESC_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.row_desc.length));
        for (var elem59 in this.row_desc) {
          elem59.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FRAGMENT_SIZE_FIELD_DESC);
    oprot.writeI64(this.fragment_size);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PAGE_SIZE_FIELD_DESC);
    oprot.writeI64(this.page_size);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_ROWS_FIELD_DESC);
    oprot.writeI64(this.max_rows);
    oprot.writeFieldEnd();
    if (this.view_sql != null) {
      oprot.writeFieldBegin(_VIEW_SQL_FIELD_DESC);
      oprot.writeString(this.view_sql);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SHARD_COUNT_FIELD_DESC);
    oprot.writeI64(this.shard_count);
    oprot.writeFieldEnd();
    if (this.key_metainfo != null) {
      oprot.writeFieldBegin(_KEY_METAINFO_FIELD_DESC);
      oprot.writeString(this.key_metainfo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IS_TEMPORARY_FIELD_DESC);
    oprot.writeBool(this.is_temporary);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TTableDetails(");

    ret.write("row_desc:");
    if (this.row_desc == null) {
      ret.write("null");
    } else {
      ret.write(this.row_desc);
    }

    ret.write(", ");
    ret.write("fragment_size:");
    ret.write(this.fragment_size);

    ret.write(", ");
    ret.write("page_size:");
    ret.write(this.page_size);

    ret.write(", ");
    ret.write("max_rows:");
    ret.write(this.max_rows);

    ret.write(", ");
    ret.write("view_sql:");
    if (this.view_sql == null) {
      ret.write("null");
    } else {
      ret.write(this.view_sql);
    }

    ret.write(", ");
    ret.write("shard_count:");
    ret.write(this.shard_count);

    ret.write(", ");
    ret.write("key_metainfo:");
    if (this.key_metainfo == null) {
      ret.write("null");
    } else {
      ret.write(this.key_metainfo);
    }

    ret.write(", ");
    ret.write("is_temporary:");
    ret.write(this.is_temporary);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

