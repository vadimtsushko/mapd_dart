/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_column;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TColumn implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TColumn");
  static final TField _DATA_FIELD_DESC = new TField("data", TType.STRUCT, 1);
  static final TField _NULLS_FIELD_DESC = new TField("nulls", TType.LIST, 2);

  TColumnData _data;
  static const int DATA = 1;
  List<bool> _nulls;
  static const int NULLS = 2;


  TColumn() {
  }

  // data
  TColumnData get data => this._data;

  set data(TColumnData data) {
    this._data = data;
  }

  bool isSetData() => this.data != null;

  unsetData() {
    this.data = null;
  }

  // nulls
  List<bool> get nulls => this._nulls;

  set nulls(List<bool> nulls) {
    this._nulls = nulls;
  }

  bool isSetNulls() => this.nulls != null;

  unsetNulls() {
    this.nulls = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DATA:
        return this.data;
      case NULLS:
        return this.nulls;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          this.data = value;
        }
        break;

      case NULLS:
        if (value == null) {
          unsetNulls();
        } else {
          this.nulls = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DATA:
        return isSetData();
      case NULLS:
        return isSetNulls();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DATA:
          if (field.type == TType.STRUCT) {
            this.data = new TColumnData();
            this.data.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NULLS:
          if (field.type == TType.LIST) {
            {
              TList _list24 = iprot.readListBegin();
              this.nulls = new List<bool>();
              for (int _i25 = 0; _i25 < _list24.length; ++_i25) {
                bool _elem26;
                _elem26 = iprot.readBool();
                this.nulls.add(_elem26);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.data != null) {
      oprot.writeFieldBegin(_DATA_FIELD_DESC);
      this.data.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.nulls != null) {
      oprot.writeFieldBegin(_NULLS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.BOOL, this.nulls.length));
        for (var elem27 in this.nulls) {
          oprot.writeBool(elem27);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TColumn(");

    ret.write("data:");
    if (this.data == null) {
      ret.write("null");
    } else {
      ret.write(this.data);
    }

    ret.write(", ");
    ret.write("nulls:");
    if (this.nulls == null) {
      ret.write("null");
    } else {
      ret.write(this.nulls);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

