/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_table_generation;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import 'package:mapd/src/driver.dart';

class TTableGeneration implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TTableGeneration");
  static final TField _TABLE_ID_FIELD_DESC = new TField("table_id", TType.I32, 1);
  static final TField _TUPLE_COUNT_FIELD_DESC = new TField("tuple_count", TType.I64, 2);
  static final TField _START_ROWID_FIELD_DESC = new TField("start_rowid", TType.I64, 3);

  int _table_id = 0;
  static const int TABLE_ID = 1;
  int _tuple_count = 0;
  static const int TUPLE_COUNT = 2;
  int _start_rowid = 0;
  static const int START_ROWID = 3;

  bool __isset_table_id = false;
  bool __isset_tuple_count = false;
  bool __isset_start_rowid = false;

  TTableGeneration() {
  }

  // table_id
  int get table_id => this._table_id;

  set table_id(int table_id) {
    this._table_id = table_id;
    this.__isset_table_id = true;
  }

  bool isSetTable_id() => this.__isset_table_id;

  unsetTable_id() {
    this.__isset_table_id = false;
  }

  // tuple_count
  int get tuple_count => this._tuple_count;

  set tuple_count(int tuple_count) {
    this._tuple_count = tuple_count;
    this.__isset_tuple_count = true;
  }

  bool isSetTuple_count() => this.__isset_tuple_count;

  unsetTuple_count() {
    this.__isset_tuple_count = false;
  }

  // start_rowid
  int get start_rowid => this._start_rowid;

  set start_rowid(int start_rowid) {
    this._start_rowid = start_rowid;
    this.__isset_start_rowid = true;
  }

  bool isSetStart_rowid() => this.__isset_start_rowid;

  unsetStart_rowid() {
    this.__isset_start_rowid = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TABLE_ID:
        return this.table_id;
      case TUPLE_COUNT:
        return this.tuple_count;
      case START_ROWID:
        return this.start_rowid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TABLE_ID:
        if (value == null) {
          unsetTable_id();
        } else {
          this.table_id = value;
        }
        break;

      case TUPLE_COUNT:
        if (value == null) {
          unsetTuple_count();
        } else {
          this.tuple_count = value;
        }
        break;

      case START_ROWID:
        if (value == null) {
          unsetStart_rowid();
        } else {
          this.start_rowid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TABLE_ID:
        return isSetTable_id();
      case TUPLE_COUNT:
        return isSetTuple_count();
      case START_ROWID:
        return isSetStart_rowid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TABLE_ID:
          if (field.type == TType.I32) {
            this.table_id = iprot.readI32();
            this.__isset_table_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TUPLE_COUNT:
          if (field.type == TType.I64) {
            this.tuple_count = iprot.readI64();
            this.__isset_tuple_count = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_ROWID:
          if (field.type == TType.I64) {
            this.start_rowid = iprot.readI64();
            this.__isset_start_rowid = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TABLE_ID_FIELD_DESC);
    oprot.writeI32(this.table_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TUPLE_COUNT_FIELD_DESC);
    oprot.writeI64(this.tuple_count);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_START_ROWID_FIELD_DESC);
    oprot.writeI64(this.start_rowid);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TTableGeneration(");

    ret.write("table_id:");
    ret.write(this.table_id);

    ret.write(", ");
    ret.write("tuple_count:");
    ret.write(this.tuple_count);

    ret.write(", ");
    ret.write("start_rowid:");
    ret.write(this.start_rowid);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

