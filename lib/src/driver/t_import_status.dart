/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_import_status;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TImportStatus implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TImportStatus");
  static final TField _ELAPSED_FIELD_DESC = new TField("elapsed", TType.I64, 1);
  static final TField _ROWS_COMPLETED_FIELD_DESC = new TField("rows_completed", TType.I64, 2);
  static final TField _ROWS_ESTIMATED_FIELD_DESC = new TField("rows_estimated", TType.I64, 3);
  static final TField _ROWS_REJECTED_FIELD_DESC = new TField("rows_rejected", TType.I64, 4);

  int _elapsed = 0;
  static const int ELAPSED = 1;
  int _rows_completed = 0;
  static const int ROWS_COMPLETED = 2;
  int _rows_estimated = 0;
  static const int ROWS_ESTIMATED = 3;
  int _rows_rejected = 0;
  static const int ROWS_REJECTED = 4;

  bool __isset_elapsed = false;
  bool __isset_rows_completed = false;
  bool __isset_rows_estimated = false;
  bool __isset_rows_rejected = false;

  TImportStatus() {
  }

  // elapsed
  int get elapsed => this._elapsed;

  set elapsed(int elapsed) {
    this._elapsed = elapsed;
    this.__isset_elapsed = true;
  }

  bool isSetElapsed() => this.__isset_elapsed;

  unsetElapsed() {
    this.__isset_elapsed = false;
  }

  // rows_completed
  int get rows_completed => this._rows_completed;

  set rows_completed(int rows_completed) {
    this._rows_completed = rows_completed;
    this.__isset_rows_completed = true;
  }

  bool isSetRows_completed() => this.__isset_rows_completed;

  unsetRows_completed() {
    this.__isset_rows_completed = false;
  }

  // rows_estimated
  int get rows_estimated => this._rows_estimated;

  set rows_estimated(int rows_estimated) {
    this._rows_estimated = rows_estimated;
    this.__isset_rows_estimated = true;
  }

  bool isSetRows_estimated() => this.__isset_rows_estimated;

  unsetRows_estimated() {
    this.__isset_rows_estimated = false;
  }

  // rows_rejected
  int get rows_rejected => this._rows_rejected;

  set rows_rejected(int rows_rejected) {
    this._rows_rejected = rows_rejected;
    this.__isset_rows_rejected = true;
  }

  bool isSetRows_rejected() => this.__isset_rows_rejected;

  unsetRows_rejected() {
    this.__isset_rows_rejected = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ELAPSED:
        return this.elapsed;
      case ROWS_COMPLETED:
        return this.rows_completed;
      case ROWS_ESTIMATED:
        return this.rows_estimated;
      case ROWS_REJECTED:
        return this.rows_rejected;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ELAPSED:
        if (value == null) {
          unsetElapsed();
        } else {
          this.elapsed = value;
        }
        break;

      case ROWS_COMPLETED:
        if (value == null) {
          unsetRows_completed();
        } else {
          this.rows_completed = value;
        }
        break;

      case ROWS_ESTIMATED:
        if (value == null) {
          unsetRows_estimated();
        } else {
          this.rows_estimated = value;
        }
        break;

      case ROWS_REJECTED:
        if (value == null) {
          unsetRows_rejected();
        } else {
          this.rows_rejected = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ELAPSED:
        return isSetElapsed();
      case ROWS_COMPLETED:
        return isSetRows_completed();
      case ROWS_ESTIMATED:
        return isSetRows_estimated();
      case ROWS_REJECTED:
        return isSetRows_rejected();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ELAPSED:
          if (field.type == TType.I64) {
            this.elapsed = iprot.readI64();
            this.__isset_elapsed = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROWS_COMPLETED:
          if (field.type == TType.I64) {
            this.rows_completed = iprot.readI64();
            this.__isset_rows_completed = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROWS_ESTIMATED:
          if (field.type == TType.I64) {
            this.rows_estimated = iprot.readI64();
            this.__isset_rows_estimated = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROWS_REJECTED:
          if (field.type == TType.I64) {
            this.rows_rejected = iprot.readI64();
            this.__isset_rows_rejected = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ELAPSED_FIELD_DESC);
    oprot.writeI64(this.elapsed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ROWS_COMPLETED_FIELD_DESC);
    oprot.writeI64(this.rows_completed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ROWS_ESTIMATED_FIELD_DESC);
    oprot.writeI64(this.rows_estimated);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ROWS_REJECTED_FIELD_DESC);
    oprot.writeI64(this.rows_rejected);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TImportStatus(");

    ret.write("elapsed:");
    ret.write(this.elapsed);

    ret.write(", ");
    ret.write("rows_completed:");
    ret.write(this.rows_completed);

    ret.write(", ");
    ret.write("rows_estimated:");
    ret.write(this.rows_estimated);

    ret.write(", ");
    ret.write("rows_rejected:");
    ret.write(this.rows_rejected);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

