/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.tdb_info;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import 'package:mapd/src/driver.dart';

class TDBInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TDBInfo");
  static final TField _DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, 1);
  static final TField _DB_OWNER_FIELD_DESC = new TField("db_owner", TType.STRING, 2);

  String _db_name;
  static const int DB_NAME = 1;
  String _db_owner;
  static const int DB_OWNER = 2;


  TDBInfo() {
  }

  // db_name
  String get db_name => this._db_name;

  set db_name(String db_name) {
    this._db_name = db_name;
  }

  bool isSetDb_name() => this.db_name != null;

  unsetDb_name() {
    this.db_name = null;
  }

  // db_owner
  String get db_owner => this._db_owner;

  set db_owner(String db_owner) {
    this._db_owner = db_owner;
  }

  bool isSetDb_owner() => this.db_owner != null;

  unsetDb_owner() {
    this.db_owner = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DB_NAME:
        return this.db_name;
      case DB_OWNER:
        return this.db_owner;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          this.db_name = value;
        }
        break;

      case DB_OWNER:
        if (value == null) {
          unsetDb_owner();
        } else {
          this.db_owner = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case DB_OWNER:
        return isSetDb_owner();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DB_NAME:
          if (field.type == TType.STRING) {
            this.db_name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DB_OWNER:
          if (field.type == TType.STRING) {
            this.db_owner = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.db_name != null) {
      oprot.writeFieldBegin(_DB_NAME_FIELD_DESC);
      oprot.writeString(this.db_name);
      oprot.writeFieldEnd();
    }
    if (this.db_owner != null) {
      oprot.writeFieldBegin(_DB_OWNER_FIELD_DESC);
      oprot.writeString(this.db_owner);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TDBInfo(");

    ret.write("db_name:");
    if (this.db_name == null) {
      ret.write("null");
    } else {
      ret.write(this.db_name);
    }

    ret.write(", ");
    ret.write("db_owner:");
    if (this.db_owner == null) {
      ret.write("null");
    } else {
      ret.write(this.db_owner);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

