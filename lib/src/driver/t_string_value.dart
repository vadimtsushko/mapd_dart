/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_string_value;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TStringValue implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TStringValue");
  static final TField _STR_VAL_FIELD_DESC = new TField("str_val", TType.STRING, 1);
  static final TField _IS_NULL_FIELD_DESC = new TField("is_null", TType.BOOL, 2);

  String _str_val;
  static const int STR_VAL = 1;
  bool _is_null = false;
  static const int IS_NULL = 2;

  bool __isset_is_null = false;

  TStringValue() {
  }

  // str_val
  String get str_val => this._str_val;

  set str_val(String str_val) {
    this._str_val = str_val;
  }

  bool isSetStr_val() => this.str_val != null;

  unsetStr_val() {
    this.str_val = null;
  }

  // is_null
  bool get is_null => this._is_null;

  set is_null(bool is_null) {
    this._is_null = is_null;
    this.__isset_is_null = true;
  }

  bool isSetIs_null() => this.__isset_is_null;

  unsetIs_null() {
    this.__isset_is_null = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case STR_VAL:
        return this.str_val;
      case IS_NULL:
        return this.is_null;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case STR_VAL:
        if (value == null) {
          unsetStr_val();
        } else {
          this.str_val = value;
        }
        break;

      case IS_NULL:
        if (value == null) {
          unsetIs_null();
        } else {
          this.is_null = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case STR_VAL:
        return isSetStr_val();
      case IS_NULL:
        return isSetIs_null();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case STR_VAL:
          if (field.type == TType.STRING) {
            this.str_val = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IS_NULL:
          if (field.type == TType.BOOL) {
            this.is_null = iprot.readBool();
            this.__isset_is_null = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.str_val != null) {
      oprot.writeFieldBegin(_STR_VAL_FIELD_DESC);
      oprot.writeString(this.str_val);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IS_NULL_FIELD_DESC);
    oprot.writeBool(this.is_null);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TStringValue(");

    ret.write("str_val:");
    if (this.str_val == null) {
      ret.write("null");
    } else {
      ret.write(this.str_val);
    }

    ret.write(", ");
    ret.write("is_null:");
    ret.write(this.is_null);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

