/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_render_property;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import '../mapd.dart';

class TRenderProperty implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TRenderProperty");
  static final TField _PROPERTY_TYPE_FIELD_DESC = new TField("property_type", TType.I32, 1);
  static final TField _PROPERTY_VALUE_FIELD_DESC = new TField("property_value", TType.STRUCT, 2);

  int _property_type;
  static const int PROPERTY_TYPE = 1;
  TDatumVal _property_value;
  static const int PROPERTY_VALUE = 2;

  bool __isset_property_type = false;

  TRenderProperty() {
  }

  // property_type
  int get property_type => this._property_type;

  set property_type(int property_type) {
    this._property_type = property_type;
    this.__isset_property_type = true;
  }

  bool isSetProperty_type() => this.__isset_property_type;

  unsetProperty_type() {
    this.__isset_property_type = false;
  }

  // property_value
  TDatumVal get property_value => this._property_value;

  set property_value(TDatumVal property_value) {
    this._property_value = property_value;
  }

  bool isSetProperty_value() => this.property_value != null;

  unsetProperty_value() {
    this.property_value = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PROPERTY_TYPE:
        return this.property_type;
      case PROPERTY_VALUE:
        return this.property_value;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PROPERTY_TYPE:
        if (value == null) {
          unsetProperty_type();
        } else {
          this.property_type = value;
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetProperty_value();
        } else {
          this.property_value = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PROPERTY_TYPE:
        return isSetProperty_type();
      case PROPERTY_VALUE:
        return isSetProperty_value();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PROPERTY_TYPE:
          if (field.type == TType.I32) {
            this.property_type = iprot.readI32();
            this.__isset_property_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROPERTY_VALUE:
          if (field.type == TType.STRUCT) {
            this.property_value = new TDatumVal();
            this.property_value.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PROPERTY_TYPE_FIELD_DESC);
    oprot.writeI32(this.property_type);
    oprot.writeFieldEnd();
    if (this.property_value != null) {
      oprot.writeFieldBegin(_PROPERTY_VALUE_FIELD_DESC);
      this.property_value.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TRenderProperty(");

    ret.write("property_type:");
    String property_type_name = TDatumType.VALUES_TO_NAMES[this.property_type];
    if (property_type_name != null) {
      ret.write(property_type_name);
      ret.write(" (");
    }
    ret.write(this.property_type);
    if (property_type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("property_value:");
    if (this.property_value == null) {
      ret.write("null");
    } else {
      ret.write(this.property_value);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetProperty_type() && !TDatumType.VALID_VALUES.contains(property_type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'property_type' has been assigned the invalid value $property_type");
    }
  }

}

