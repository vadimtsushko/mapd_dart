/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_insert_data;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TInsertData implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TInsertData");
  static final TField _DB_ID_FIELD_DESC = new TField("db_id", TType.I32, 1);
  static final TField _TABLE_ID_FIELD_DESC = new TField("table_id", TType.I32, 2);
  static final TField _COLUMN_IDS_FIELD_DESC = new TField("column_ids", TType.LIST, 3);
  static final TField _DATA_FIELD_DESC = new TField("data", TType.LIST, 4);
  static final TField _NUM_ROWS_FIELD_DESC = new TField("num_rows", TType.I64, 5);

  int _db_id = 0;
  static const int DB_ID = 1;
  int _table_id = 0;
  static const int TABLE_ID = 2;
  List<int> _column_ids;
  static const int COLUMN_IDS = 3;
  List<TDataBlockPtr> _data;
  static const int DATA = 4;
  int _num_rows = 0;
  static const int NUM_ROWS = 5;

  bool __isset_db_id = false;
  bool __isset_table_id = false;
  bool __isset_num_rows = false;

  TInsertData() {
  }

  // db_id
  int get db_id => this._db_id;

  set db_id(int db_id) {
    this._db_id = db_id;
    this.__isset_db_id = true;
  }

  bool isSetDb_id() => this.__isset_db_id;

  unsetDb_id() {
    this.__isset_db_id = false;
  }

  // table_id
  int get table_id => this._table_id;

  set table_id(int table_id) {
    this._table_id = table_id;
    this.__isset_table_id = true;
  }

  bool isSetTable_id() => this.__isset_table_id;

  unsetTable_id() {
    this.__isset_table_id = false;
  }

  // column_ids
  List<int> get column_ids => this._column_ids;

  set column_ids(List<int> column_ids) {
    this._column_ids = column_ids;
  }

  bool isSetColumn_ids() => this.column_ids != null;

  unsetColumn_ids() {
    this.column_ids = null;
  }

  // data
  List<TDataBlockPtr> get data => this._data;

  set data(List<TDataBlockPtr> data) {
    this._data = data;
  }

  bool isSetData() => this.data != null;

  unsetData() {
    this.data = null;
  }

  // num_rows
  int get num_rows => this._num_rows;

  set num_rows(int num_rows) {
    this._num_rows = num_rows;
    this.__isset_num_rows = true;
  }

  bool isSetNum_rows() => this.__isset_num_rows;

  unsetNum_rows() {
    this.__isset_num_rows = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DB_ID:
        return this.db_id;
      case TABLE_ID:
        return this.table_id;
      case COLUMN_IDS:
        return this.column_ids;
      case DATA:
        return this.data;
      case NUM_ROWS:
        return this.num_rows;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case DB_ID:
        if (value == null) {
          unsetDb_id();
        } else {
          this.db_id = value;
        }
        break;

      case TABLE_ID:
        if (value == null) {
          unsetTable_id();
        } else {
          this.table_id = value;
        }
        break;

      case COLUMN_IDS:
        if (value == null) {
          unsetColumn_ids();
        } else {
          this.column_ids = value;
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          this.data = value;
        }
        break;

      case NUM_ROWS:
        if (value == null) {
          unsetNum_rows();
        } else {
          this.num_rows = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DB_ID:
        return isSetDb_id();
      case TABLE_ID:
        return isSetTable_id();
      case COLUMN_IDS:
        return isSetColumn_ids();
      case DATA:
        return isSetData();
      case NUM_ROWS:
        return isSetNum_rows();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DB_ID:
          if (field.type == TType.I32) {
            this.db_id = iprot.readI32();
            this.__isset_db_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TABLE_ID:
          if (field.type == TType.I32) {
            this.table_id = iprot.readI32();
            this.__isset_table_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COLUMN_IDS:
          if (field.type == TType.LIST) {
            {
              TList _list76 = iprot.readListBegin();
              this.column_ids = new List<int>();
              for (int _i77 = 0; _i77 < _list76.length; ++_i77) {
                int _elem78;
                _elem78 = iprot.readI32();
                this.column_ids.add(_elem78);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.LIST) {
            {
              TList _list79 = iprot.readListBegin();
              this.data = new List<TDataBlockPtr>();
              for (int _i80 = 0; _i80 < _list79.length; ++_i80) {
                TDataBlockPtr _elem81;
                _elem81 = new TDataBlockPtr();
                _elem81.read(iprot);
                this.data.add(_elem81);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM_ROWS:
          if (field.type == TType.I64) {
            this.num_rows = iprot.readI64();
            this.__isset_num_rows = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_DB_ID_FIELD_DESC);
    oprot.writeI32(this.db_id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TABLE_ID_FIELD_DESC);
    oprot.writeI32(this.table_id);
    oprot.writeFieldEnd();
    if (this.column_ids != null) {
      oprot.writeFieldBegin(_COLUMN_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.column_ids.length));
        for (var elem82 in this.column_ids) {
          oprot.writeI32(elem82);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.data != null) {
      oprot.writeFieldBegin(_DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.data.length));
        for (var elem83 in this.data) {
          elem83.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_NUM_ROWS_FIELD_DESC);
    oprot.writeI64(this.num_rows);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TInsertData(");

    ret.write("db_id:");
    ret.write(this.db_id);

    ret.write(", ");
    ret.write("table_id:");
    ret.write(this.table_id);

    ret.write(", ");
    ret.write("column_ids:");
    if (this.column_ids == null) {
      ret.write("null");
    } else {
      ret.write(this.column_ids);
    }

    ret.write(", ");
    ret.write("data:");
    if (this.data == null) {
      ret.write("null");
    } else {
      ret.write(this.data);
    }

    ret.write(", ");
    ret.write("num_rows:");
    ret.write(this.num_rows);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

