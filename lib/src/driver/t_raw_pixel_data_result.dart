/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_raw_pixel_data_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import '../mapd.dart';

class TRawPixelDataResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TRawPixelDataResult");
  static final TField _WIDTH_FIELD_DESC = new TField("width", TType.I32, 1);
  static final TField _HEIGHT_FIELD_DESC = new TField("height", TType.I32, 2);
  static final TField _RENDER_PASS_MAP_FIELD_DESC = new TField("render_pass_map", TType.MAP, 3);
  static final TField _EXECUTION_TIME_MS_FIELD_DESC = new TField("execution_time_ms", TType.I64, 8);
  static final TField _RENDER_TIME_MS_FIELD_DESC = new TField("render_time_ms", TType.I64, 9);
  static final TField _TOTAL_TIME_MS_FIELD_DESC = new TField("total_time_ms", TType.I64, 10);

  int _width = 0;
  static const int WIDTH = 1;
  int _height = 0;
  static const int HEIGHT = 2;
  Map<int, TRawRenderPassDataResult> _render_pass_map;
  static const int RENDER_PASS_MAP = 3;
  int _execution_time_ms = 0;
  static const int EXECUTION_TIME_MS = 8;
  int _render_time_ms = 0;
  static const int RENDER_TIME_MS = 9;
  int _total_time_ms = 0;
  static const int TOTAL_TIME_MS = 10;

  bool __isset_width = false;
  bool __isset_height = false;
  bool __isset_execution_time_ms = false;
  bool __isset_render_time_ms = false;
  bool __isset_total_time_ms = false;

  TRawPixelDataResult() {
  }

  // width
  int get width => this._width;

  set width(int width) {
    this._width = width;
    this.__isset_width = true;
  }

  bool isSetWidth() => this.__isset_width;

  unsetWidth() {
    this.__isset_width = false;
  }

  // height
  int get height => this._height;

  set height(int height) {
    this._height = height;
    this.__isset_height = true;
  }

  bool isSetHeight() => this.__isset_height;

  unsetHeight() {
    this.__isset_height = false;
  }

  // render_pass_map
  Map<int, TRawRenderPassDataResult> get render_pass_map => this._render_pass_map;

  set render_pass_map(Map<int, TRawRenderPassDataResult> render_pass_map) {
    this._render_pass_map = render_pass_map;
  }

  bool isSetRender_pass_map() => this.render_pass_map != null;

  unsetRender_pass_map() {
    this.render_pass_map = null;
  }

  // execution_time_ms
  int get execution_time_ms => this._execution_time_ms;

  set execution_time_ms(int execution_time_ms) {
    this._execution_time_ms = execution_time_ms;
    this.__isset_execution_time_ms = true;
  }

  bool isSetExecution_time_ms() => this.__isset_execution_time_ms;

  unsetExecution_time_ms() {
    this.__isset_execution_time_ms = false;
  }

  // render_time_ms
  int get render_time_ms => this._render_time_ms;

  set render_time_ms(int render_time_ms) {
    this._render_time_ms = render_time_ms;
    this.__isset_render_time_ms = true;
  }

  bool isSetRender_time_ms() => this.__isset_render_time_ms;

  unsetRender_time_ms() {
    this.__isset_render_time_ms = false;
  }

  // total_time_ms
  int get total_time_ms => this._total_time_ms;

  set total_time_ms(int total_time_ms) {
    this._total_time_ms = total_time_ms;
    this.__isset_total_time_ms = true;
  }

  bool isSetTotal_time_ms() => this.__isset_total_time_ms;

  unsetTotal_time_ms() {
    this.__isset_total_time_ms = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case WIDTH:
        return this.width;
      case HEIGHT:
        return this.height;
      case RENDER_PASS_MAP:
        return this.render_pass_map;
      case EXECUTION_TIME_MS:
        return this.execution_time_ms;
      case RENDER_TIME_MS:
        return this.render_time_ms;
      case TOTAL_TIME_MS:
        return this.total_time_ms;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case WIDTH:
        if (value == null) {
          unsetWidth();
        } else {
          this.width = value;
        }
        break;

      case HEIGHT:
        if (value == null) {
          unsetHeight();
        } else {
          this.height = value;
        }
        break;

      case RENDER_PASS_MAP:
        if (value == null) {
          unsetRender_pass_map();
        } else {
          this.render_pass_map = value;
        }
        break;

      case EXECUTION_TIME_MS:
        if (value == null) {
          unsetExecution_time_ms();
        } else {
          this.execution_time_ms = value;
        }
        break;

      case RENDER_TIME_MS:
        if (value == null) {
          unsetRender_time_ms();
        } else {
          this.render_time_ms = value;
        }
        break;

      case TOTAL_TIME_MS:
        if (value == null) {
          unsetTotal_time_ms();
        } else {
          this.total_time_ms = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case WIDTH:
        return isSetWidth();
      case HEIGHT:
        return isSetHeight();
      case RENDER_PASS_MAP:
        return isSetRender_pass_map();
      case EXECUTION_TIME_MS:
        return isSetExecution_time_ms();
      case RENDER_TIME_MS:
        return isSetRender_time_ms();
      case TOTAL_TIME_MS:
        return isSetTotal_time_ms();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case WIDTH:
          if (field.type == TType.I32) {
            this.width = iprot.readI32();
            this.__isset_width = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HEIGHT:
          if (field.type == TType.I32) {
            this.height = iprot.readI32();
            this.__isset_height = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RENDER_PASS_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map84 = iprot.readMapBegin();
              this.render_pass_map = new Map<int, TRawRenderPassDataResult>();
              for (int _i85 = 0; _i85 < _map84.length; ++_i85) {
                int _key86;
                TRawRenderPassDataResult _val87;
                _key86 = iprot.readI32();
                _val87 = new TRawRenderPassDataResult();
                _val87.read(iprot);
                this.render_pass_map[_key86] = _val87;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTION_TIME_MS:
          if (field.type == TType.I64) {
            this.execution_time_ms = iprot.readI64();
            this.__isset_execution_time_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RENDER_TIME_MS:
          if (field.type == TType.I64) {
            this.render_time_ms = iprot.readI64();
            this.__isset_render_time_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTAL_TIME_MS:
          if (field.type == TType.I64) {
            this.total_time_ms = iprot.readI64();
            this.__isset_total_time_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_WIDTH_FIELD_DESC);
    oprot.writeI32(this.width);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HEIGHT_FIELD_DESC);
    oprot.writeI32(this.height);
    oprot.writeFieldEnd();
    if (this.render_pass_map != null) {
      oprot.writeFieldBegin(_RENDER_PASS_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.render_pass_map.length));
        for (var elem89 in this.render_pass_map.keys) {
          oprot.writeI32(elem89);
          this.render_pass_map[elem89].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EXECUTION_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.execution_time_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_RENDER_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.render_time_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.total_time_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TRawPixelDataResult(");

    ret.write("width:");
    ret.write(this.width);

    ret.write(", ");
    ret.write("height:");
    ret.write(this.height);

    ret.write(", ");
    ret.write("render_pass_map:");
    if (this.render_pass_map == null) {
      ret.write("null");
    } else {
      ret.write(this.render_pass_map);
    }

    ret.write(", ");
    ret.write("execution_time_ms:");
    ret.write(this.execution_time_ms);

    ret.write(", ");
    ret.write("render_time_ms:");
    ret.write(this.render_time_ms);

    ret.write(", ");
    ret.write("total_time_ms:");
    ret.write(this.total_time_ms);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

