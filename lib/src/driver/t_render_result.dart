/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_render_result;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TRenderResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TRenderResult");
  static final TField _IMAGE_FIELD_DESC = new TField("image", TType.STRING, 1);
  static final TField _NONCE_FIELD_DESC = new TField("nonce", TType.STRING, 2);
  static final TField _EXECUTION_TIME_MS_FIELD_DESC = new TField("execution_time_ms", TType.I64, 3);
  static final TField _RENDER_TIME_MS_FIELD_DESC = new TField("render_time_ms", TType.I64, 4);
  static final TField _TOTAL_TIME_MS_FIELD_DESC = new TField("total_time_ms", TType.I64, 5);

  Uint8List _image;
  static const int IMAGE = 1;
  String _nonce;
  static const int NONCE = 2;
  int _execution_time_ms = 0;
  static const int EXECUTION_TIME_MS = 3;
  int _render_time_ms = 0;
  static const int RENDER_TIME_MS = 4;
  int _total_time_ms = 0;
  static const int TOTAL_TIME_MS = 5;

  bool __isset_execution_time_ms = false;
  bool __isset_render_time_ms = false;
  bool __isset_total_time_ms = false;

  TRenderResult() {
  }

  // image
  Uint8List get image => this._image;

  set image(Uint8List image) {
    this._image = image;
  }

  bool isSetImage() => this.image != null;

  unsetImage() {
    this.image = null;
  }

  // nonce
  String get nonce => this._nonce;

  set nonce(String nonce) {
    this._nonce = nonce;
  }

  bool isSetNonce() => this.nonce != null;

  unsetNonce() {
    this.nonce = null;
  }

  // execution_time_ms
  int get execution_time_ms => this._execution_time_ms;

  set execution_time_ms(int execution_time_ms) {
    this._execution_time_ms = execution_time_ms;
    this.__isset_execution_time_ms = true;
  }

  bool isSetExecution_time_ms() => this.__isset_execution_time_ms;

  unsetExecution_time_ms() {
    this.__isset_execution_time_ms = false;
  }

  // render_time_ms
  int get render_time_ms => this._render_time_ms;

  set render_time_ms(int render_time_ms) {
    this._render_time_ms = render_time_ms;
    this.__isset_render_time_ms = true;
  }

  bool isSetRender_time_ms() => this.__isset_render_time_ms;

  unsetRender_time_ms() {
    this.__isset_render_time_ms = false;
  }

  // total_time_ms
  int get total_time_ms => this._total_time_ms;

  set total_time_ms(int total_time_ms) {
    this._total_time_ms = total_time_ms;
    this.__isset_total_time_ms = true;
  }

  bool isSetTotal_time_ms() => this.__isset_total_time_ms;

  unsetTotal_time_ms() {
    this.__isset_total_time_ms = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case IMAGE:
        return this.image;
      case NONCE:
        return this.nonce;
      case EXECUTION_TIME_MS:
        return this.execution_time_ms;
      case RENDER_TIME_MS:
        return this.render_time_ms;
      case TOTAL_TIME_MS:
        return this.total_time_ms;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case IMAGE:
        if (value == null) {
          unsetImage();
        } else {
          this.image = value;
        }
        break;

      case NONCE:
        if (value == null) {
          unsetNonce();
        } else {
          this.nonce = value;
        }
        break;

      case EXECUTION_TIME_MS:
        if (value == null) {
          unsetExecution_time_ms();
        } else {
          this.execution_time_ms = value;
        }
        break;

      case RENDER_TIME_MS:
        if (value == null) {
          unsetRender_time_ms();
        } else {
          this.render_time_ms = value;
        }
        break;

      case TOTAL_TIME_MS:
        if (value == null) {
          unsetTotal_time_ms();
        } else {
          this.total_time_ms = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case IMAGE:
        return isSetImage();
      case NONCE:
        return isSetNonce();
      case EXECUTION_TIME_MS:
        return isSetExecution_time_ms();
      case RENDER_TIME_MS:
        return isSetRender_time_ms();
      case TOTAL_TIME_MS:
        return isSetTotal_time_ms();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case IMAGE:
          if (field.type == TType.STRING) {
            this.image = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NONCE:
          if (field.type == TType.STRING) {
            this.nonce = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXECUTION_TIME_MS:
          if (field.type == TType.I64) {
            this.execution_time_ms = iprot.readI64();
            this.__isset_execution_time_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RENDER_TIME_MS:
          if (field.type == TType.I64) {
            this.render_time_ms = iprot.readI64();
            this.__isset_render_time_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTAL_TIME_MS:
          if (field.type == TType.I64) {
            this.total_time_ms = iprot.readI64();
            this.__isset_total_time_ms = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.image != null) {
      oprot.writeFieldBegin(_IMAGE_FIELD_DESC);
      oprot.writeBinary(this.image);
      oprot.writeFieldEnd();
    }
    if (this.nonce != null) {
      oprot.writeFieldBegin(_NONCE_FIELD_DESC);
      oprot.writeString(this.nonce);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EXECUTION_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.execution_time_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_RENDER_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.render_time_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.total_time_ms);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TRenderResult(");

    ret.write("image:");
    if (this.image == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("nonce:");
    if (this.nonce == null) {
      ret.write("null");
    } else {
      ret.write(this.nonce);
    }

    ret.write(", ");
    ret.write("execution_time_ms:");
    ret.write(this.execution_time_ms);

    ret.write(", ");
    ret.write("render_time_ms:");
    ret.write(this.render_time_ms);

    ret.write(", ");
    ret.write("total_time_ms:");
    ret.write(this.total_time_ms);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

