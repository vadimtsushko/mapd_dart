/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_data_frame;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TDataFrame implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TDataFrame");
  static final TField _SM_HANDLE_FIELD_DESC = new TField("sm_handle", TType.STRING, 1);
  static final TField _SM_SIZE_FIELD_DESC = new TField("sm_size", TType.I64, 2);
  static final TField _DF_HANDLE_FIELD_DESC = new TField("df_handle", TType.STRING, 3);
  static final TField _DF_SIZE_FIELD_DESC = new TField("df_size", TType.I64, 4);

  Uint8List _sm_handle;
  static const int SM_HANDLE = 1;
  int _sm_size = 0;
  static const int SM_SIZE = 2;
  Uint8List _df_handle;
  static const int DF_HANDLE = 3;
  int _df_size = 0;
  static const int DF_SIZE = 4;

  bool __isset_sm_size = false;
  bool __isset_df_size = false;

  TDataFrame() {
  }

  // sm_handle
  Uint8List get sm_handle => this._sm_handle;

  set sm_handle(Uint8List sm_handle) {
    this._sm_handle = sm_handle;
  }

  bool isSetSm_handle() => this.sm_handle != null;

  unsetSm_handle() {
    this.sm_handle = null;
  }

  // sm_size
  int get sm_size => this._sm_size;

  set sm_size(int sm_size) {
    this._sm_size = sm_size;
    this.__isset_sm_size = true;
  }

  bool isSetSm_size() => this.__isset_sm_size;

  unsetSm_size() {
    this.__isset_sm_size = false;
  }

  // df_handle
  Uint8List get df_handle => this._df_handle;

  set df_handle(Uint8List df_handle) {
    this._df_handle = df_handle;
  }

  bool isSetDf_handle() => this.df_handle != null;

  unsetDf_handle() {
    this.df_handle = null;
  }

  // df_size
  int get df_size => this._df_size;

  set df_size(int df_size) {
    this._df_size = df_size;
    this.__isset_df_size = true;
  }

  bool isSetDf_size() => this.__isset_df_size;

  unsetDf_size() {
    this.__isset_df_size = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SM_HANDLE:
        return this.sm_handle;
      case SM_SIZE:
        return this.sm_size;
      case DF_HANDLE:
        return this.df_handle;
      case DF_SIZE:
        return this.df_size;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SM_HANDLE:
        if (value == null) {
          unsetSm_handle();
        } else {
          this.sm_handle = value;
        }
        break;

      case SM_SIZE:
        if (value == null) {
          unsetSm_size();
        } else {
          this.sm_size = value;
        }
        break;

      case DF_HANDLE:
        if (value == null) {
          unsetDf_handle();
        } else {
          this.df_handle = value;
        }
        break;

      case DF_SIZE:
        if (value == null) {
          unsetDf_size();
        } else {
          this.df_size = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SM_HANDLE:
        return isSetSm_handle();
      case SM_SIZE:
        return isSetSm_size();
      case DF_HANDLE:
        return isSetDf_handle();
      case DF_SIZE:
        return isSetDf_size();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SM_HANDLE:
          if (field.type == TType.STRING) {
            this.sm_handle = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SM_SIZE:
          if (field.type == TType.I64) {
            this.sm_size = iprot.readI64();
            this.__isset_sm_size = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DF_HANDLE:
          if (field.type == TType.STRING) {
            this.df_handle = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DF_SIZE:
          if (field.type == TType.I64) {
            this.df_size = iprot.readI64();
            this.__isset_df_size = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.sm_handle != null) {
      oprot.writeFieldBegin(_SM_HANDLE_FIELD_DESC);
      oprot.writeBinary(this.sm_handle);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SM_SIZE_FIELD_DESC);
    oprot.writeI64(this.sm_size);
    oprot.writeFieldEnd();
    if (this.df_handle != null) {
      oprot.writeFieldBegin(_DF_HANDLE_FIELD_DESC);
      oprot.writeBinary(this.df_handle);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_DF_SIZE_FIELD_DESC);
    oprot.writeI64(this.df_size);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TDataFrame(");

    ret.write("sm_handle:");
    if (this.sm_handle == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("sm_size:");
    ret.write(this.sm_size);

    ret.write(", ");
    ret.write("df_handle:");
    if (this.df_handle == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("df_size:");
    ret.write(this.df_size);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

