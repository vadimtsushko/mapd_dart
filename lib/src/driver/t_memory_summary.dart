/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_memory_summary;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import '../mapd.dart';

class TMemorySummary implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TMemorySummary");
  static final TField _CPU_MEMORY_IN_USE_FIELD_DESC = new TField("cpu_memory_in_use", TType.I64, 1);
  static final TField _GPU_SUMMARY_FIELD_DESC = new TField("gpu_summary", TType.LIST, 2);

  int _cpu_memory_in_use = 0;
  static const int CPU_MEMORY_IN_USE = 1;
  List<TGpuMemorySummary> _gpu_summary;
  static const int GPU_SUMMARY = 2;

  bool __isset_cpu_memory_in_use = false;

  TMemorySummary() {
  }

  // cpu_memory_in_use
  int get cpu_memory_in_use => this._cpu_memory_in_use;

  set cpu_memory_in_use(int cpu_memory_in_use) {
    this._cpu_memory_in_use = cpu_memory_in_use;
    this.__isset_cpu_memory_in_use = true;
  }

  bool isSetCpu_memory_in_use() => this.__isset_cpu_memory_in_use;

  unsetCpu_memory_in_use() {
    this.__isset_cpu_memory_in_use = false;
  }

  // gpu_summary
  List<TGpuMemorySummary> get gpu_summary => this._gpu_summary;

  set gpu_summary(List<TGpuMemorySummary> gpu_summary) {
    this._gpu_summary = gpu_summary;
  }

  bool isSetGpu_summary() => this.gpu_summary != null;

  unsetGpu_summary() {
    this.gpu_summary = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CPU_MEMORY_IN_USE:
        return this.cpu_memory_in_use;
      case GPU_SUMMARY:
        return this.gpu_summary;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CPU_MEMORY_IN_USE:
        if (value == null) {
          unsetCpu_memory_in_use();
        } else {
          this.cpu_memory_in_use = value;
        }
        break;

      case GPU_SUMMARY:
        if (value == null) {
          unsetGpu_summary();
        } else {
          this.gpu_summary = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CPU_MEMORY_IN_USE:
        return isSetCpu_memory_in_use();
      case GPU_SUMMARY:
        return isSetGpu_summary();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CPU_MEMORY_IN_USE:
          if (field.type == TType.I64) {
            this.cpu_memory_in_use = iprot.readI64();
            this.__isset_cpu_memory_in_use = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GPU_SUMMARY:
          if (field.type == TType.LIST) {
            {
              TList _list52 = iprot.readListBegin();
              this.gpu_summary = new List<TGpuMemorySummary>();
              for (int _i53 = 0; _i53 < _list52.length; ++_i53) {
                TGpuMemorySummary _elem54;
                _elem54 = new TGpuMemorySummary();
                _elem54.read(iprot);
                this.gpu_summary.add(_elem54);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CPU_MEMORY_IN_USE_FIELD_DESC);
    oprot.writeI64(this.cpu_memory_in_use);
    oprot.writeFieldEnd();
    if (this.gpu_summary != null) {
      oprot.writeFieldBegin(_GPU_SUMMARY_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.gpu_summary.length));
        for (var elem55 in this.gpu_summary) {
          elem55.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TMemorySummary(");

    ret.write("cpu_memory_in_use:");
    ret.write(this.cpu_memory_in_use);

    ret.write(", ");
    ret.write("gpu_summary:");
    if (this.gpu_summary == null) {
      ret.write("null");
    } else {
      ret.write(this.gpu_summary);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

