/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_pixel_rows;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import '../mapd.dart';

class TPixelRows implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TPixelRows");
  static final TField _PIXEL_FIELD_DESC = new TField("pixel", TType.STRUCT, 1);
  static final TField _ROW_SET_FIELD_DESC = new TField("row_set", TType.STRUCT, 2);

  TPixel _pixel;
  static const int PIXEL = 1;
  TRowSet _row_set;
  static const int ROW_SET = 2;


  TPixelRows() {
  }

  // pixel
  TPixel get pixel => this._pixel;

  set pixel(TPixel pixel) {
    this._pixel = pixel;
  }

  bool isSetPixel() => this.pixel != null;

  unsetPixel() {
    this.pixel = null;
  }

  // row_set
  TRowSet get row_set => this._row_set;

  set row_set(TRowSet row_set) {
    this._row_set = row_set;
  }

  bool isSetRow_set() => this.row_set != null;

  unsetRow_set() {
    this.row_set = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PIXEL:
        return this.pixel;
      case ROW_SET:
        return this.row_set;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PIXEL:
        if (value == null) {
          unsetPixel();
        } else {
          this.pixel = value;
        }
        break;

      case ROW_SET:
        if (value == null) {
          unsetRow_set();
        } else {
          this.row_set = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PIXEL:
        return isSetPixel();
      case ROW_SET:
        return isSetRow_set();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PIXEL:
          if (field.type == TType.STRUCT) {
            this.pixel = new TPixel();
            this.pixel.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROW_SET:
          if (field.type == TType.STRUCT) {
            this.row_set = new TRowSet();
            this.row_set.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.pixel != null) {
      oprot.writeFieldBegin(_PIXEL_FIELD_DESC);
      this.pixel.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.row_set != null) {
      oprot.writeFieldBegin(_ROW_SET_FIELD_DESC);
      this.row_set.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TPixelRows(");

    ret.write("pixel:");
    if (this.pixel == null) {
      ret.write("null");
    } else {
      ret.write(this.pixel);
    }

    ret.write(", ");
    ret.write("row_set:");
    if (this.row_set == null) {
      ret.write("null");
    } else {
      ret.write(this.row_set);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

