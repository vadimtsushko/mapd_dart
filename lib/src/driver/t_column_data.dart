/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_column_data;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import '../driver.dart';

class TColumnData implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TColumnData");
  static final TField _INT_COL_FIELD_DESC = new TField("int_col", TType.LIST, 1);
  static final TField _REAL_COL_FIELD_DESC = new TField("real_col", TType.LIST, 2);
  static final TField _STR_COL_FIELD_DESC = new TField("str_col", TType.LIST, 3);
  static final TField _ARR_COL_FIELD_DESC = new TField("arr_col", TType.LIST, 4);

  List<int> _int_col;
  static const int INT_COL = 1;
  List<double> _real_col;
  static const int REAL_COL = 2;
  List<String> _str_col;
  static const int STR_COL = 3;
  List<TColumn> _arr_col;
  static const int ARR_COL = 4;


  TColumnData() {
  }

  // int_col
  List<int> get int_col => this._int_col;

  set int_col(List<int> int_col) {
    this._int_col = int_col;
  }

  bool isSetInt_col() => this.int_col != null;

  unsetInt_col() {
    this.int_col = null;
  }

  // real_col
  List<double> get real_col => this._real_col;

  set real_col(List<double> real_col) {
    this._real_col = real_col;
  }

  bool isSetReal_col() => this.real_col != null;

  unsetReal_col() {
    this.real_col = null;
  }

  // str_col
  List<String> get str_col => this._str_col;

  set str_col(List<String> str_col) {
    this._str_col = str_col;
  }

  bool isSetStr_col() => this.str_col != null;

  unsetStr_col() {
    this.str_col = null;
  }

  // arr_col
  List<TColumn> get arr_col => this._arr_col;

  set arr_col(List<TColumn> arr_col) {
    this._arr_col = arr_col;
  }

  bool isSetArr_col() => this.arr_col != null;

  unsetArr_col() {
    this.arr_col = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INT_COL:
        return this.int_col;
      case REAL_COL:
        return this.real_col;
      case STR_COL:
        return this.str_col;
      case ARR_COL:
        return this.arr_col;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case INT_COL:
        if (value == null) {
          unsetInt_col();
        } else {
          this.int_col = value;
        }
        break;

      case REAL_COL:
        if (value == null) {
          unsetReal_col();
        } else {
          this.real_col = value;
        }
        break;

      case STR_COL:
        if (value == null) {
          unsetStr_col();
        } else {
          this.str_col = value;
        }
        break;

      case ARR_COL:
        if (value == null) {
          unsetArr_col();
        } else {
          this.arr_col = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INT_COL:
        return isSetInt_col();
      case REAL_COL:
        return isSetReal_col();
      case STR_COL:
        return isSetStr_col();
      case ARR_COL:
        return isSetArr_col();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INT_COL:
          if (field.type == TType.LIST) {
            {
              TList _list8 = iprot.readListBegin();
              this.int_col = new List<int>();
              for (int _i9 = 0; _i9 < _list8.length; ++_i9) {
                int _elem10;
                _elem10 = iprot.readI64();
                this.int_col.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REAL_COL:
          if (field.type == TType.LIST) {
            {
              TList _list11 = iprot.readListBegin();
              this.real_col = new List<double>();
              for (int _i12 = 0; _i12 < _list11.length; ++_i12) {
                double _elem13;
                _elem13 = iprot.readDouble();
                this.real_col.add(_elem13);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STR_COL:
          if (field.type == TType.LIST) {
            {
              TList _list14 = iprot.readListBegin();
              this.str_col = new List<String>();
              for (int _i15 = 0; _i15 < _list14.length; ++_i15) {
                String _elem16;
                _elem16 = iprot.readString();
                this.str_col.add(_elem16);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ARR_COL:
          if (field.type == TType.LIST) {
            {
              TList _list17 = iprot.readListBegin();
              this.arr_col = new List<TColumn>();
              for (int _i18 = 0; _i18 < _list17.length; ++_i18) {
                TColumn _elem19;
                _elem19 = new TColumn();
                _elem19.read(iprot);
                this.arr_col.add(_elem19);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.int_col != null) {
      oprot.writeFieldBegin(_INT_COL_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.int_col.length));
        for (var elem20 in this.int_col) {
          oprot.writeI64(elem20);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.real_col != null) {
      oprot.writeFieldBegin(_REAL_COL_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.DOUBLE, this.real_col.length));
        for (var elem21 in this.real_col) {
          oprot.writeDouble(elem21);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.str_col != null) {
      oprot.writeFieldBegin(_STR_COL_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.str_col.length));
        for (var elem22 in this.str_col) {
          oprot.writeString(elem22);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.arr_col != null) {
      oprot.writeFieldBegin(_ARR_COL_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.arr_col.length));
        for (var elem23 in this.arr_col) {
          elem23.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TColumnData(");

    ret.write("int_col:");
    if (this.int_col == null) {
      ret.write("null");
    } else {
      ret.write(this.int_col);
    }

    ret.write(", ");
    ret.write("real_col:");
    if (this.real_col == null) {
      ret.write("null");
    } else {
      ret.write(this.real_col);
    }

    ret.write(", ");
    ret.write("str_col:");
    if (this.str_col == null) {
      ret.write("null");
    } else {
      ret.write(this.str_col);
    }

    ret.write(", ");
    ret.write("arr_col:");
    if (this.arr_col == null) {
      ret.write("null");
    } else {
      ret.write(this.arr_col);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

