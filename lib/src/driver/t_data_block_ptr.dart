/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mapd.src.t_data_block_ptr;

import 'dart:typed_data' show Uint8List;
import 'package:mapd/src/thrift/thrift.dart';
import 'package:mapd/src/driver.dart';

class TDataBlockPtr implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TDataBlockPtr");
  static final TField _FIXED_LEN_DATA_FIELD_DESC = new TField("fixed_len_data", TType.STRING, 1);
  static final TField _VAR_LEN_DATA_FIELD_DESC = new TField("var_len_data", TType.LIST, 2);

  Uint8List _fixed_len_data;
  static const int FIXED_LEN_DATA = 1;
  List<TVarLen> _var_len_data;
  static const int VAR_LEN_DATA = 2;


  TDataBlockPtr() {
  }

  // fixed_len_data
  Uint8List get fixed_len_data => this._fixed_len_data;

  set fixed_len_data(Uint8List fixed_len_data) {
    this._fixed_len_data = fixed_len_data;
  }

  bool isSetFixed_len_data() => this.fixed_len_data != null;

  unsetFixed_len_data() {
    this.fixed_len_data = null;
  }

  // var_len_data
  List<TVarLen> get var_len_data => this._var_len_data;

  set var_len_data(List<TVarLen> var_len_data) {
    this._var_len_data = var_len_data;
  }

  bool isSetVar_len_data() => this.var_len_data != null;

  unsetVar_len_data() {
    this.var_len_data = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FIXED_LEN_DATA:
        return this.fixed_len_data;
      case VAR_LEN_DATA:
        return this.var_len_data;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case FIXED_LEN_DATA:
        if (value == null) {
          unsetFixed_len_data();
        } else {
          this.fixed_len_data = value;
        }
        break;

      case VAR_LEN_DATA:
        if (value == null) {
          unsetVar_len_data();
        } else {
          this.var_len_data = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FIXED_LEN_DATA:
        return isSetFixed_len_data();
      case VAR_LEN_DATA:
        return isSetVar_len_data();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FIXED_LEN_DATA:
          if (field.type == TType.STRING) {
            this.fixed_len_data = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VAR_LEN_DATA:
          if (field.type == TType.LIST) {
            {
              TList _list76 = iprot.readListBegin();
              this.var_len_data = new List<TVarLen>();
              for (int _i77 = 0; _i77 < _list76.length; ++_i77) {
                TVarLen _elem78;
                _elem78 = new TVarLen();
                _elem78.read(iprot);
                this.var_len_data.add(_elem78);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (isSetFixed_len_data()) {
      if (this.fixed_len_data != null) {
        oprot.writeFieldBegin(_FIXED_LEN_DATA_FIELD_DESC);
        oprot.writeBinary(this.fixed_len_data);
        oprot.writeFieldEnd();
      }
    }
    if (isSetVar_len_data()) {
      if (this.var_len_data != null) {
        oprot.writeFieldBegin(_VAR_LEN_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.var_len_data.length));
          for (var elem79 in this.var_len_data) {
            elem79.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TDataBlockPtr(");

    if (isSetFixed_len_data()) {
      ret.write("fixed_len_data:");
      if (this.fixed_len_data == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetVar_len_data()) {
      ret.write(", ");
      ret.write("var_len_data:");
      if (this.var_len_data == null) {
        ret.write("null");
      } else {
        ret.write(this.var_len_data);
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

